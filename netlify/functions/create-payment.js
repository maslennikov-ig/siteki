/**
 * Netlify Function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –¢-–±–∞–Ω–∫–∞
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å—å Token –Ω–∞ backend
 * ESM –≤–µ—Ä—Å–∏—è –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö Netlify Functions
 */

import crypto from 'crypto';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
const TERMINAL_KEY = 'TinkoffBankTest';
const TERMINAL_PASSWORD = 'TinkoffBankTest'; // DEMO –ø–∞—Ä–æ–ª—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Token (SHA-256 –ø–æ–¥–ø–∏—Å–∏) –Ω–∞ backend
 */
function generateToken(params) {
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
    const allParams = { ...params, Password: TERMINAL_PASSWORD };
    
    // –£–¥–∞–ª—è–µ–º Token –µ—Å–ª–∏ –µ—Å—Ç—å
    delete allParams.Token;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    const sortedKeys = Object.keys(allParams).sort();
    
    // –ö–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    let concatenated = '';
    sortedKeys.forEach(key => {
        const value = allParams[key];
        if (typeof value === 'object') {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (Receipt, DATA)
            return;
        }
        if (typeof value === 'boolean') {
            concatenated += value ? 'true' : 'false';
        } else {
            concatenated += String(value);
        }
    });
    
    console.log('üîê –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (DEMO):', concatenated);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SHA-256 —Ö–µ—à
    return crypto.createHash('sha256').update(concatenated).digest('hex');
}

/**
 * Netlify Function handler (ESM export)
 */
export default async (request, context) => {
    // CORS headers
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };
    
    // Handle preflight requests
    if (request.method === 'OPTIONS') {
        return new Response('', {
            status: 200,
            headers
        });
    }
    
    if (request.method !== 'POST') {
        return new Response(JSON.stringify({ error: '–ú–µ—Ç–æ–¥ GET –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }), {
            status: 405,
            headers
        });
    }
    
    try {
        const body = await request.json();
        console.log('üìã Received payment request:', body);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!body.Amount || !body.OrderId || !body.Description) {
            return new Response(JSON.stringify({ 
                error: 'Missing required fields: Amount, OrderId, Description' 
            }), {
                status: 400,
                headers
            });
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API –¢-–±–∞–Ω–∫–∞
        const initParams = {
            TerminalKey: TERMINAL_KEY,
            Amount: body.Amount,
            OrderId: body.OrderId,
            Description: body.Description,
            Language: 'ru',
            PayType: 'O', // –û–¥–Ω–æ—Å—Ç–∞–¥–∏–π–Ω–∞—è –æ–ø–ª–∞—Ç–∞
            SuccessURL: body.SuccessURL || 'https://siteki.netlify.app/thankyou.html',
            FailURL: body.FailURL || 'https://siteki.netlify.app/fail.html',
            DATA: {
                connection_type: 'Widget',
                Email: body.Email || 'test@example.com',
                Phone: body.Phone || '+79999999999'
            },
            Receipt: {
                EmailCompany: 'info@siteki.netlify.app',
                Taxation: 'usn_income',
                Items: [
                    {
                        Name: body.Description,
                        Price: body.Amount,
                        Quantity: 1,
                        Amount: body.Amount,
                        PaymentMethod: 'full_prepayment',
                        PaymentObject: 'service',
                        Tax: 'none'
                    }
                ]
            }
        };
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Token –Ω–∞ backend
        const token = generateToken(initParams);
        initParams.Token = token;
        
        console.log('‚úÖ Token generated on backend:', token.substring(0, 16) + '...');
        console.log('üì§ Sending to T-Bank API:', initParams);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¢-–±–∞–Ω–∫–∞
        const response = await fetch('https://securepay.tinkoff.ru/v2/Init', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(initParams)
        });
        
        const result = await response.json();
        console.log('üì® T-Bank API response:', result);
        
        return new Response(JSON.stringify(result), {
            status: 200,
            headers
        });
        
    } catch (error) {
        console.error('‚ùå Backend error:', error);
        return new Response(JSON.stringify({ 
            error: 'Internal server error',
            details: error.message 
        }), {
            status: 500,
            headers
        });
    }
}; 