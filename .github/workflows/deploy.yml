name: üöÄ Deploy to Yandex Cloud

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ —Å–±–æ—Ä–∫–∞
  build:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì• Install dependencies
      run: npm ci

    - name: üé® Build CSS with Tailwind
      run: npx tailwindcss -i ./src/styles.css -o ./dist/styles.css --minify

    - name: üì¶ Prepare static files
      run: |
        mkdir -p dist
        cp *.html dist/
        cp *.jpg *.png *.svg dist/ 2>/dev/null || true
        cp *.js dist/
        cp openapi.json dist/ 2>/dev/null || true

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: static-files
        path: dist/
        retention-days: 1



  # –î–µ–ø–ª–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  deploy-static:
    name: üì¶ Deploy Static Files
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: static-files
        path: dist/

    - name: üîß Setup AWS CLI for S3
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        aws-region: ru-central1

    - name: üì§ Upload to Object Storage
      run: |
        aws s3 sync dist/ s3://${{ secrets.YC_STORAGE_BUCKET }}/ \
          --endpoint-url=https://storage.yandexcloud.net \
          --delete \
          --cache-control "max-age=86400" \
          --metadata-directive REPLACE

    - name: üßπ Cleanup artifacts
      run: rm -rf dist/

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Terraform (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  terraform:
    name: üèóÔ∏è Terraform Plan/Apply
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    defaults:
      run:
        working-directory: yandex-cloud/terraform
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: üì¶ Install dependencies
      run: |
        # Install jq for JSON parsing
        sudo apt-get update
        sudo apt-get install -y jq
        
        # Install Yandex Cloud CLI
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
        
    - name: üîß Configure Yandex Cloud CLI
      run: |
        # Create service account key file
        echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > /tmp/sa-key.json
        
        # Configure yc CLI
        $HOME/yandex-cloud/bin/yc config set service-account-key /tmp/sa-key.json
        $HOME/yandex-cloud/bin/yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        $HOME/yandex-cloud/bin/yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
        
        # Test configuration
        echo "‚úÖ YC CLI –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
        $HOME/yandex-cloud/bin/yc config list

    - name: üì¶ Create function archives
      run: |
        cd ../functions/create-payment
        zip -r ../create-payment.zip .
        cd ../send-to-n8n
        zip -r ../send-to-n8n.zip .
        cd ../../terraform
        mkdir -p functions
        mv ../functions/create-payment.zip functions/
        mv ../functions/send-to-n8n.zip functions/

    - name: üîÑ Terraform Init
      run: terraform init

    - name: üîç Verify YC CLI Configuration
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ YC CLI..."
        $HOME/yandex-cloud/bin/yc config list
        echo "‚úÖ YC CLI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"

    - name: üìã Terraform Plan
      run: |
        export YC_SERVICE_ACCOUNT_KEY_FILE="/tmp/sa-key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"
        terraform plan \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
          -var="domain_name=academycredit.ru"

    - name: üöÄ Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        export YC_SERVICE_ACCOUNT_KEY_FILE="/tmp/sa-key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"
        terraform apply -auto-approve \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
          -var="domain_name=academycredit.ru"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–ª–æ–µ
  notify:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: [terraform, deploy-static]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: ‚úÖ Success notification
      if: needs.terraform.result == 'success' && needs.deploy-static.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "‚úÖ Functions deployed via Terraform"
        echo "‚úÖ Static files uploaded"
        echo "üåê Site is live at: https://${{ secrets.YC_STORAGE_BUCKET }}"

    - name: ‚ùå Failure notification
      if: needs.terraform.result == 'failure' || needs.deploy-static.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details."
        exit 1 