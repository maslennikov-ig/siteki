name: 🚀 Deploy to Yandex Cloud

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # Проверка кода и сборка
  build:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install dependencies
      run: npm ci

    - name: 🎨 Build CSS with Tailwind
      run: npx tailwindcss -i ./src/styles.css -o ./dist/styles.css --minify

    - name: 📦 Prepare static files
      run: |
        mkdir -p dist
        cp *.html dist/
        cp *.jpg *.png *.svg dist/ 2>/dev/null || true
        cp *.js dist/
        cp openapi.json dist/ 2>/dev/null || true

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: static-files
        path: dist/
        retention-days: 1



  # Деплой статических файлов
  deploy-static:
    name: 📦 Deploy Static Files
    runs-on: ubuntu-latest
    needs: [build, terraform]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: static-files
        path: dist/

    - name: 🔧 Setup Yandex Cloud CLI
      run: |
        # Install Yandex Cloud CLI
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
        
        # Configure YC CLI
        echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > /tmp/sa-key.json
        $HOME/yandex-cloud/bin/yc config set service-account-key /tmp/sa-key.json
        $HOME/yandex-cloud/bin/yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        $HOME/yandex-cloud/bin/yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

    - name: 📤 Upload to Object Storage
      run: |
        # Создаем и выкладываем файлы через yc CLI
        for file in dist/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            echo "📁 Загружаем: $filename"
            $HOME/yandex-cloud/bin/yc storage s3api put-object \
              --bucket ${{ secrets.YC_STORAGE_BUCKET }} \
              --key "$filename" \
              --body "$file" \
              --cache-control "max-age=86400"
          fi
        done
        echo "✅ Все файлы загружены!"

    - name: 🧹 Cleanup artifacts
      run: |
        rm -rf dist/
        rm -f /tmp/sa-key.json

  # Обновление Terraform (опционально)
  terraform:
    name: 🏗️ Terraform Plan/Apply
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    defaults:
      run:
        working-directory: yandex-cloud/terraform
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: 📦 Install dependencies
      run: |
        # Install jq for JSON parsing
        sudo apt-get update
        sudo apt-get install -y jq
        
        # Install Yandex Cloud CLI
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
        
    - name: 🔧 Configure Yandex Cloud CLI
      run: |
        # Create service account key file
        echo '${{ secrets.YC_SA_JSON_CREDENTIALS }}' > /tmp/sa-key.json
        
        # Configure yc CLI
        $HOME/yandex-cloud/bin/yc config set service-account-key /tmp/sa-key.json
        $HOME/yandex-cloud/bin/yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        $HOME/yandex-cloud/bin/yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
        
        # Test configuration
        echo "✅ YC CLI конфигурация:"
        $HOME/yandex-cloud/bin/yc config list

    - name: 📦 Create function archives
      run: |
        cd ../functions/create-payment
        zip -r ../create-payment.zip .
        cd ../send-to-n8n
        zip -r ../send-to-n8n.zip .
        cd ../../terraform
        mkdir -p functions
        mv ../functions/create-payment.zip functions/
        mv ../functions/send-to-n8n.zip functions/

    - name: 🔄 Terraform Init
      run: terraform init

    - name: 📝 Create Terraform variables file
      run: |
        echo "🔧 Создание файла переменных..."
        cat > terraform.tfvars << EOF
        folder_id = "${{ secrets.YC_FOLDER_ID }}"
        domain_name = "academycredit.ru"
        EOF
        echo "✅ Файл terraform.tfvars создан"

    - name: 🔍 Verify YC CLI Configuration
      run: |
        echo "🔍 Проверка конфигурации YC CLI..."
        $HOME/yandex-cloud/bin/yc config list
        echo "✅ YC CLI готов к работе!"

    - name: 📝 Update import blocks with actual function IDs
      run: |
        echo "🔄 Обновление import блоков с актуальными ID функций..."
        
        # Получаем ID существующих ресурсов
        CREATE_PAYMENT_ID=$($HOME/yandex-cloud/bin/yc serverless function get create-payment --format=json 2>/dev/null | jq -r '.id' 2>/dev/null || echo "")
        SEND_TO_N8N_ID=$($HOME/yandex-cloud/bin/yc serverless function get send-to-n8n --format=json 2>/dev/null | jq -r '.id' 2>/dev/null || echo "")
        API_GATEWAY_ID=$($HOME/yandex-cloud/bin/yc serverless api-gateway get siteki-api --format=json 2>/dev/null | jq -r '.id' 2>/dev/null || echo "")
        
        echo "📋 Найденные ID:"
        echo "  create-payment: $CREATE_PAYMENT_ID"
        echo "  send-to-n8n: $SEND_TO_N8N_ID"
        echo "  api-gateway: $API_GATEWAY_ID"
        
        # Обновляем main.tf с правильными ID для функций
        if [[ -n "$CREATE_PAYMENT_ID" && "$CREATE_PAYMENT_ID" != "null" && "$CREATE_PAYMENT_ID" != "" ]]; then
          echo "📝 Обновление ID для create-payment функции..."
          sed -i "s/id = \"d4e7qmhtr3ms2kv5v6jg\"/id = \"$CREATE_PAYMENT_ID\"/" main.tf
        else
          echo "⚠️ create-payment функция не найдена, удаляем import блок"
          sed -i '/# Импорт существующей функции create-payment/,/^}$/d' main.tf
        fi
        
        if [[ -n "$SEND_TO_N8N_ID" && "$SEND_TO_N8N_ID" != "null" && "$SEND_TO_N8N_ID" != "" ]]; then
          echo "📝 Обновление ID для send-to-n8n функции..."
          sed -i "s/id = \"d4emo3l7d88cej49f3d9\"/id = \"$SEND_TO_N8N_ID\"/" main.tf
        else
          echo "⚠️ send-to-n8n функция не найдена, удаляем import блок"
          sed -i '/# Импорт существующей функции send-to-n8n/,/^}$/d' main.tf
        fi
        
        # Добавляем import блок для API Gateway если существует
        if [[ -n "$API_GATEWAY_ID" && "$API_GATEWAY_ID" != "null" && "$API_GATEWAY_ID" != "" ]]; then
          echo "📝 Добавление import блока для API Gateway..."
          cat >> main.tf << EOF
        
        # Импорт существующего API Gateway
        import {
          to = yandex_api_gateway.siteki_gateway
          id = "$API_GATEWAY_ID"
        }
        EOF
        fi
        
        echo "✅ Обновление import блоков завершено"

    - name: 📋 Terraform Plan
      run: |
        export YC_SERVICE_ACCOUNT_KEY_FILE="/tmp/sa-key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"
        terraform plan -var-file=terraform.tfvars

    - name: 🚀 Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        export YC_SERVICE_ACCOUNT_KEY_FILE="/tmp/sa-key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"
        terraform apply -auto-approve -var-file=terraform.tfvars

  # Уведомления о деплое
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [terraform, deploy-static]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: ✅ Success notification
      if: needs.terraform.result == 'success' && needs.deploy-static.result == 'success'
      run: |
        echo "🎉 Deployment successful!"
        echo "✅ Functions deployed via Terraform"
        echo "✅ Static files uploaded"
        echo "🌐 Site is live at: https://${{ secrets.YC_STORAGE_BUCKET }}"

    - name: ❌ Failure notification
      if: needs.terraform.result == 'failure' || needs.deploy-static.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs above for details."
        exit 1 