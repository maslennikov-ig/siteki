name: üöÄ Deploy to Yandex Cloud

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  TERRAFORM_VERSION: '1.6.0'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∏ —Å–±–æ—Ä–∫–∞
  build:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üì¶ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì• Install dependencies
      run: npm ci

    - name: üé® Build CSS with Tailwind
      run: npx tailwindcss -i ./src/styles.css -o ./dist/styles.css --minify

    - name: üì¶ Prepare static files
      run: |
        mkdir -p dist
        cp *.html dist/
        cp *.jpg *.png *.svg dist/ 2>/dev/null || true
        cp *.js dist/
        cp openapi.json dist/ 2>/dev/null || true

    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: static-files
        path: dist/
        retention-days: 1

  # –î–µ–ø–ª–æ–π Cloud Functions
  deploy-functions:
    name: ‚ö° Deploy Functions
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup Yandex Cloud CLI
      run: |
        curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
        echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH

    - name: üîë Authenticate Yandex Cloud
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        yc config profile create github-actions
        yc config set service-account-key key.json
        yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
        yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

    - name: üì¶ Package create-payment function
      run: |
        cd yandex-cloud/functions/create-payment
        zip -r create-payment.zip .
        mv create-payment.zip ../

    - name: üì¶ Package send-to-n8n function
      run: |
        cd yandex-cloud/functions/send-to-n8n
        zip -r send-to-n8n.zip .
        mv send-to-n8n.zip ../

    - name: ‚ö° Deploy create-payment function
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
        if yc serverless function get create-payment >/dev/null 2>&1; then
          echo "Updating existing function..."
          yc serverless function version create \
            --function-name create-payment \
            --runtime nodejs18 \
            --entrypoint index.handler \
            --memory 128m \
            --execution-timeout 10s \
            --source-path yandex-cloud/functions/create-payment.zip
        else
          echo "Creating new function..."
          yc serverless function create --name create-payment
          yc serverless function version create \
            --function-name create-payment \
            --runtime nodejs18 \
            --entrypoint index.handler \
            --memory 128m \
            --execution-timeout 10s \
            --source-path yandex-cloud/functions/create-payment.zip
        fi

    - name: ‚ö° Deploy send-to-n8n function
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
        if yc serverless function get send-to-n8n >/dev/null 2>&1; then
          echo "Updating existing function..."
          yc serverless function version create \
            --function-name send-to-n8n \
            --runtime nodejs18 \
            --entrypoint index.handler \
            --memory 128m \
            --execution-timeout 10s \
            --source-path yandex-cloud/functions/send-to-n8n.zip
        else
          echo "Creating new function..."
          yc serverless function create --name send-to-n8n
          yc serverless function version create \
            --function-name send-to-n8n \
            --runtime nodejs18 \
            --entrypoint index.handler \
            --memory 128m \
            --execution-timeout 10s \
            --source-path yandex-cloud/functions/send-to-n8n.zip
        fi

    - name: üåê Make functions public
      run: |
        yc serverless function allow-unauthenticated-invoke create-payment
        yc serverless function allow-unauthenticated-invoke send-to-n8n

  # –î–µ–ø–ª–æ–π —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  deploy-static:
    name: üì¶ Deploy Static Files
    runs-on: ubuntu-latest
    needs: [build, deploy-functions]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: static-files
        path: dist/

    - name: üîß Setup AWS CLI for S3
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.YC_STORAGE_ACCESS_KEY }}
        aws-secret-access-key: ${{ secrets.YC_STORAGE_SECRET_KEY }}
        aws-region: ru-central1

    - name: üì§ Upload to Object Storage
      run: |
        aws s3 sync dist/ s3://${{ secrets.YC_BUCKET_NAME }}/ \
          --endpoint-url=https://storage.yandexcloud.net \
          --delete \
          --cache-control "max-age=86400" \
          --metadata-directive REPLACE

    - name: üßπ Cleanup artifacts
      run: rm -rf dist/

  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Terraform (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  terraform:
    name: üèóÔ∏è Terraform Plan/Apply
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    defaults:
      run:
        working-directory: yandex-cloud/terraform
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: üîë Setup Terraform credentials
      run: |
        echo '${{ secrets.YC_SERVICE_ACCOUNT_KEY }}' > key.json
        export YC_SERVICE_ACCOUNT_KEY_FILE="$(pwd)/key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"

    - name: üèóÔ∏è Terraform Init
      run: terraform init

    - name: üìã Terraform Plan
      run: |
        export YC_SERVICE_ACCOUNT_KEY_FILE="$(pwd)/key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"
        terraform plan \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
          -var="domain_name=${{ secrets.YC_BUCKET_NAME }}"

    - name: üöÄ Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        export YC_SERVICE_ACCOUNT_KEY_FILE="$(pwd)/key.json"
        export YC_CLOUD_ID="${{ secrets.YC_CLOUD_ID }}"
        export YC_FOLDER_ID="${{ secrets.YC_FOLDER_ID }}"
        terraform apply -auto-approve \
          -var="folder_id=${{ secrets.YC_FOLDER_ID }}" \
          -var="domain_name=${{ secrets.YC_BUCKET_NAME }}"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–ª–æ–µ
  notify:
    name: üì¢ Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-functions, deploy-static]
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - name: ‚úÖ Success notification
      if: needs.deploy-functions.result == 'success' && needs.deploy-static.result == 'success'
      run: |
        echo "üéâ Deployment successful!"
        echo "‚úÖ Functions deployed"
        echo "‚úÖ Static files uploaded"
        echo "üåê Site is live at: https://${{ secrets.YC_BUCKET_NAME }}"

    - name: ‚ùå Failure notification
      if: needs.deploy-functions.result == 'failure' || needs.deploy-static.result == 'failure'
      run: |
        echo "‚ùå Deployment failed!"
        echo "Check the logs above for details."
        exit 1 